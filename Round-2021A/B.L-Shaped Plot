#include<bits/stdc++.h>
#include <iterator>
#include <iostream>
#include <numeric>
#include <math.h>
#define ll long long
#define ull long
#define mpa make_pair
#define pb push_back
#define ff first
#define pii pair<ll,ll>
#define dd double
#define trace(x) cerr << #x << " : " << x << endl
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();
#define sc(x) scanf("%lld",&x)
#define clr(x,val) memset(x,val,sizeof(x))
#define pr(x) printf("%lld\n",x) 
#define pdd pair<dd,dd>
#define read_arr(a,n) for(ll i=1;i<=n;i++)cin>>a[i];
#define init_arr(a,n) for(ll i=1;i<=n;i++)a[i]=n-i+1;
#define prec(x) cout<<fixed<<setprecision(x)
#define fre freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
#define arr array 
using namespace std;
ll grid[1005][1005];
ll prec_row[1005][1005];
ll prec_col[1005][1005];
ll nx_row[1005][1005];
ll nx_col[1005][1005];

void solve(ll tc){
	ll r,c,ans=0;
	cin>>r>>c;

	for(ll i=1;i<=r;i++){
		for(ll j=1;j<=c;j++){
			cin>>grid[i][j];
		}
	}


	//csum for rows
	for(ll i=1;i<=r;i++){
		for(ll j=1;j<=c;j++){
			if(grid[i][j]==1){
				prec_row[i][j]=prec_row[i][j-1]+1;
			}else{
				prec_row[i][j]=0;
			}
		}

		nx_row[i][c+1]=0;
		for(ll j=c;j>=1;j--){
			if(grid[i][j]==1){
				nx_row[i][j]=nx_row[i][j+1]+1;
			}else{
				nx_row[i][j]=0;
			}
		}
	}

	

	//csum for cols
	for(ll j=1;j<=c;j++){

		for(ll i=1;i<=r;i++){
			if(grid[i][j]==1){
				prec_col[i][j]=prec_col[i-1][j]+1;
			}else{
				prec_col[i][j]=0;
			}
		}

		nx_col[r+1][j]=0;
		for(ll i=r;i>=1;i--){
			if(grid[i][j]==1){
				nx_col[i][j]=nx_col[i+1][j]+1;
			}else{
				nx_col[i][j]=0;
			}
		}
	}

	

	



	for(ll i=1;i<=r;i++){
		for(ll j=1;j<=c;j++){
			if(grid[i][j]==1){
				//nx_row prev_col
				ans+=max(0ll,min(nx_row[i][j]-1,prec_col[i][j]/2-1));
				ans+=max(0ll,min(nx_row[i][j]/2-1,prec_col[i][j]-1));


				//nx_row nx_col
				ans+=max(0ll,min(nx_row[i][j]-1,nx_col[i][j]/2-1));
				ans+=max(0ll,min(nx_row[i][j]/2-1,nx_col[i][j]-1));

				//p_row prev_col
				ans+=max(0ll,min(prec_row[i][j]-1,prec_col[i][j]/2-1));
				ans+=max(0ll,min(prec_row[i][j]/2-1,prec_col[i][j]-1));


				//p_row nx_col
			    ans+=max(0ll,min(prec_row[i][j]-1,nx_col[i][j]/2-1));
				ans+=max(0ll,min(prec_row[i][j]/2-1,nx_col[i][j]-1));

				
			}
			
		}
	
	}

	cout<<"Case #"<<tc<<": "<<ans<<endl;
	
}
	

int main(){

	boost;
	ll t=1;
	cin>>t;
	ll tc=1;


	while(t--){
		solve(tc);
		tc++;
	}
	

}
	
	
 
 
 
 


	

	







	
	

	
	




		


    
	


		
